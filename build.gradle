import org.apache.tools.ant.taskdefs.condition.Os
import com.github.stickerifier.stickerify.JlinkTask

plugins {
    alias(libs.plugins.shadow)
    id 'application'
    id 'java'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.batik
    implementation libs.gson
    implementation libs.imageio.batik
    implementation libs.imageio.psd
    implementation libs.jave
    implementation libs.logback.classic
    implementation libs.logback.core
    implementation libs.scrimage.core
    implementation libs.scrimage.formats.extra
    implementation libs.scrimage.webp
    implementation libs.slf4j.api
    implementation libs.telegram.bot.api
    implementation libs.tika

    testRuntimeOnly libs.junit.platform
    testImplementation libs.hamcrest
    testImplementation libs.junit
    testImplementation libs.mockwebserver

    constraints {
        implementation(libs.okio) {
            because 'CVE-2023-3635: Okio Signed to Unsigned Conversion Error vulnerability'
        }
    }
}

group = 'com.github.stickerifier'
version = '1.0'
description = 'Telegram bot to convert medias in the format required to be used as Telegram stickers'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
        vendor = JvmVendorSpec.AZUL
    }
}

def jlink = tasks.register('jlink', JlinkTask) {
    options = ['--strip-debug', '--no-header-files', '--no-man-pages']
    modules = ['java.desktop', 'java.instrument', 'java.naming', 'java.sql', 'jdk.crypto.ec', 'jdk.unsupported']

    group = 'build'
    description = 'Generates a minimal JRE for the project.'
}

test {
    dependsOn jlink

    def jre = jlink.get().jreDir
    inputs.dir jre
    executable = jre.get().file(Os.isFamily(Os.FAMILY_WINDOWS) ? 'bin\\java.exe' : 'bin/java')

    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        xml.outputLocation = file('.qodana/code-coverage/report.xml')
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/MediaConstraints.class',
                                        '**/stickerify/exception/**',
                                        '**/stickerify/process/**',
                                        '**/stickerify/runner**',
                                        '**/stickerify/telegram/**'])
        })
    }
}

application {
    mainClass = 'com.github.stickerifier.stickerify.runner.Main'
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    mergeServiceFiles()
    failOnDuplicateEntries = true

    exclude('dist_webp_binaries/',
            'META-INF/LICENSE',
            'META-INF/LICENSE.txt',
            'META-INF/NOTICE',
            'META-INF/NOTICE.txt',
            'license/LICENSE',
            'license/LICENSE.dom-documentation.txt',
            'license/LICENSE.dom-software.txt',
            'license/NOTICE',
            'license/README.dom.txt')
}

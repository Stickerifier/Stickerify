import com.github.stickerifier.stickerify.JlinkJavaLauncher
import com.github.stickerifier.stickerify.JlinkTask

plugins {
    id('java')
    id('jacoco')
    id('application')
    alias(libs.plugins.spring.nullability)
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly(libs.jspecify)
    implementation(libs.gson)
    implementation(libs.jave)
    implementation(libs.logback.classic)
    implementation(libs.telegram.bot.api)
    implementation(libs.tika)

    testImplementation(libs.hamcrest)
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockwebserver)
    testRuntimeOnly(libs.junit.platform)
}

group = 'com.github.stickerifier'
version = '2.0'
description = 'Telegram bot to convert medias in the format required to be used as Telegram stickers'

java.toolchain {
    languageVersion = JavaLanguageVersion.of(25)
    vendor = JvmVendorSpec.ADOPTIUM
}

updateDaemonJvm {
    languageVersion = JavaLanguageVersion.of(25)
    vendor = JvmVendorSpec.ADOPTIUM
}

def jlink = tasks.register('jlink', JlinkTask) {
    options = ['--strip-debug', '--no-header-files', '--no-man-pages']
    modules = [
            'java.instrument', // for junit
            'java.naming',     // for logback
            'java.sql',        // for tika
            'jdk.unsupported'  // for gson
    ]
    includeModulePath = false

    group = 'build'
    description = 'Generates a minimal JRE for the project.'
}

test {
    inputs.dir(jlink.map { it.outputDirectory.get().asFile })
    javaLauncher = providers.provider { new JlinkJavaLauncher(jlink.get()) }

    useJUnitPlatform()
    finalizedBy(jacocoTestReport)

    testLogging {
        events('passed', 'failed', 'skipped')
    }
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        xml.outputLocation = file('build/code-coverage/report.xml')
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/MediaConstraints.class',
                                        '**/stickerify/exception/**',
                                        '**/stickerify/process/**',
                                        '**/stickerify/runner/**',
                                        '**/stickerify/telegram/**'])
        })
    }
}

def generateCohArchive = tasks.register('generateCohArchive', Exec) {
    inputs.dir(jlink.map { it.outputDirectory.get().asFile })

    def java = jlink.map { it.outputDirectory.file('jre/bin/java').get().asFile.absolutePath }
    doFirst { commandLine(java.get(), '-XX:+UseCompactObjectHeaders', '-Xshare:dump') }
}

jlink.configure { finalizedBy(generateCohArchive) }
test.mustRunAfter(generateCohArchive)
installDist.mustRunAfter(generateCohArchive)

application {
    mainClass = 'com.github.stickerifier.stickerify.runner.Main'
    applicationDefaultJvmArgs = ['-XX:+UseCompactObjectHeaders', '-XX:+UseShenandoahGC', '-XX:ShenandoahGCMode=generational']
}

distributions {
    main {
        contents {
            //noinspection GroovyAssignabilityCheck
            from(jlink)
        }
    }
}

tasks.named('startScripts', CreateStartScripts) {
    unixStartScriptGenerator.template = resources.text.fromFile('src/main/resources/customUnixStartScript.txt')
    windowsStartScriptGenerator.template = resources.text.fromFile('src/main/resources/customWindowsStartScript.txt')
}

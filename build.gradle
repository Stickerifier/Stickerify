import com.github.stickerifier.stickerify.JlinkJavaLauncher
import com.github.stickerifier.stickerify.JlinkTask

plugins {
    id('application')
    id('java')
    id('jacoco')
    alias(libs.plugins.shadow)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.batik)
    implementation(libs.gson)
    implementation(libs.imageio.batik)
    implementation(libs.imageio.psd)
    implementation(libs.jave)
    implementation(libs.logback.classic)
    implementation(libs.logback.core)
    implementation(libs.scrimage.core)
    implementation(libs.scrimage.formats.extra)
    implementation(libs.scrimage.webp)
    implementation(libs.slf4j.api)
    implementation(libs.telegram.bot.api)
    implementation(libs.tika)

    testImplementation(libs.hamcrest)
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockwebserver)
    testRuntimeOnly(libs.junit.platform)

    constraints {
        implementation('org.apache.commons:commons-lang3') {
            version {
                strictly('[3.18.0, 4)')
            }
            because('CVE-2025-48924: Apache Commons Lang is vulnerable to Uncontrolled Recursion when processing long inputs')
        }
    }
}

group = 'com.github.stickerifier'
version = '1.0'
description = 'Telegram bot to convert medias in the format required to be used as Telegram stickers'

java.toolchain {
    languageVersion = JavaLanguageVersion.of(24)
    vendor = JvmVendorSpec.ADOPTIUM
}

updateDaemonJvm {
    languageVersion = JavaLanguageVersion.of(24)
    vendor = JvmVendorSpec.ADOPTIUM
}

def jlink = tasks.register('jlink', JlinkTask) {
    options = ['--strip-debug', '--no-header-files', '--no-man-pages']
    modules = ['java.desktop', 'java.instrument', 'java.naming', 'java.sql', 'jdk.crypto.ec', 'jdk.unsupported']
    includeModulePath = false

    group = 'build'
    description = 'Generates a minimal JRE for the project.'
}

test {
    inputs.dir(jlink.map { it.outputDirectory.get().asFile })
    javaLauncher = providers.provider { new JlinkJavaLauncher(jlink.get()) }

    useJUnitPlatform()
    finalizedBy(jacocoTestReport)

    testLogging {
        events 'passed', 'failed', 'skipped'
    }
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        xml.outputLocation = file('.qodana/code-coverage/report.xml')
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/MediaConstraints.class',
                                        '**/stickerify/exception/**',
                                        '**/stickerify/process/**',
                                        '**/stickerify/runner/**',
                                        '**/stickerify/telegram/**'])
        })
    }
}

application {
    mainClass = 'com.github.stickerifier.stickerify.runner.Main'
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    mergeServiceFiles()
    failOnDuplicateEntries = true

    exclude('dist_webp_binaries/',
            'META-INF/LICENSE',
            'META-INF/LICENSE.txt',
            'META-INF/NOTICE',
            'META-INF/NOTICE.txt',
            'license/LICENSE',
            'license/LICENSE.dom-documentation.txt',
            'license/LICENSE.dom-software.txt',
            'license/NOTICE',
            'license/README.dom.txt')
}
